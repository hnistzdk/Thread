package Study.My_Thread;

/**
 * @Description
 * @Author zdk
 * @Date 2020/10/19 18:14
 */

/**
 * synchronized表示当前线程，独占 对象 someObject
 * 当前线程独占 了对象someObject，如果有其他线程试图占有对象someObject，就会等待，直到当前线程释放对someObject的占用。
 * someObject 又叫同步对象，所有的对象，都可以作为同步对象
 * 为了达到同步的效果，必须使用同一个同步对象
 *
 * 三种方法：1.将对象的对应方法修饰为synchronized 2.将下面实现的run方法修饰为synchronized
 * 3.使用synchronized(对象)  将目标对象作为同步对象，同一时间只能有一个线程能对期进行修改
 *
 * 释放同步对象的方式： synchronized 块自然结束，或者有异常抛出
 *
 * 如果一个类，其方法都是有synchronized修饰的，那么该类就叫做线程安全的类
 */

class Hero{
    String name;
    int hp;
    int mp;
    public Hero(String name,int hp,int mp){
        this.name=name;this.hp=hp;this.mp=mp;
    }

    public synchronized void addHp(){
        this.hp+=10;
        System.out.printf("%s 回血10点,增加血后，%s的血量是%d\n", name, name, hp);
        this.notify();
    }
    public synchronized void reduceHp(){
        if(this.hp<20)
        {
            try{
                this.wait();
            }catch (InterruptedException e){}
        }
        this.hp-=20;
        System.out.printf("%s 减血20点,减血后，%s的血量是%d\n", name, name, hp);
    }
    public void attacked(){
        this.reduceHp();
    }
    boolean isDead(){
        return hp<=0 ? true:false;
    }
}

public class Solve_ThreadSynchronization {
    public static void main(String[] args)
    {
        Hero Kai=new Hero("凯",100,100);
        int n = 5;
        Thread[] addThreads = new Thread[n];
        Thread[] reduceThreads = new Thread[n];
        for(int i=0;i<n;i++)
        {
            Thread t=new Thread(){
                public void run(){
                    synchronized (Kai){
                        Kai.addHp();
                    }
                    try {
                        Thread.sleep(100);
                    }catch (InterruptedException e){
                        e.printStackTrace();
                    }
                }
            };
            t.start();
            addThreads[i]=t;
        }
        for(int i=0;i<n;i++)
        {
            Thread t=new Thread(){
                public synchronized void run(){
                        Kai.attacked();
                    try {
                        Thread.sleep(100);
                    }catch (InterruptedException e){
                        e.printStackTrace();
                    }
                }
            };
            t.start();
            reduceThreads[i]=t;
        }
        //等待所有增加线程结束
        //这样是为了确保main线程最后结束。t.join()就是让主线程等待当前线程t结束后主线程再继续运行。
        for(Thread t:addThreads)
        {
            try {
                t.join();
            }catch (InterruptedException e){
                e.printStackTrace();
            }
        }
        for(Thread t:reduceThreads)
        {
            try {
                t.join();
            }catch (InterruptedException e){
                e.printStackTrace();
            }
        }
        System.out.printf("%d个增加线程和%d个减少线程结束后%n凯的血量是 %d\n", n,n,Kai.hp);
    }
}
